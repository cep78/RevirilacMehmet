<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        CAOAMAwBAHAOAADwDwAB8A+Agfgfgcf8P+M=
</value>
  </data>
</root>